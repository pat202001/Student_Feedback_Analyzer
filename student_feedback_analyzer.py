# -*- coding: utf-8 -*-
"""Student_feedback_Analyzer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H-aqxAO89Ci1tN_MOrvBsGEn-MjjT5tr
"""

#title Default title text
import nltk
import pandas as pd
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
from textblob import TextBlob
import string
import csv

# Download the necessary NLTK resources
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')

# Define a function to clean the text
feedback_text= pd.read_excel('Ratings_AI.xlsx')
feedback_OT= pd.read_excel('Ratings_OT.xlsx')
# feedback_OT= pd.read_excel('OT_feedback.xlsx')
def clean_text(text):
    # Convert to lowercase
    text = feedback_text.lower()
    text_OT = feedback_text.lower()
    # Remove punctuation
    text = feedback_text.translate(str.maketrans("", "", string.punctuation))
    text_OT = feedback_OT.translate(str.maketrans("", "", string.punctuation))
    # Tokenize the text
    tokens = word_tokenize(text)
    tokens_OT = word_tokenize(text)
    
    # Remove stop words
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if not word in stop_words]
    tokens_OT= [word for word in tokens if not word in stop_words]
    
    # Lemmatize the tokens
    lemmatizer = WordNetLemmatizer()
    tokens =[lemmatizer.lemmatize(word) for word in tokens]
    
    lemmatizer_OT = WordNetLemmatizer()
    tokens_OT =[lemmatizer.lemmatize(word) for word in tokens]
    # Join the tokens back into a string
    clean_text = ' '.join(tokens)
    clean_text = ' '.join(tokens_OT)
    
    return clean_text

#AI_dataset=pd.read_excel('AI_feedback.xlsx')
AI_dataset= feedback_text

AI_dataset

AI_practice_teaching = list(AI_dataset['What are the practices of teaching AI, you are feeling is good to learn and understand AI'])

AI_improvments = list(AI_dataset['What improvements is required in teaching to make the concepts of AI learn easily'])

len(AI_improvments)

# #AI_practice_teaching whole column polarity
AI_practice_teaching_all = {}
for i in range(0,len(AI_practice_teaching)):
  res_AI_practice_teaching = TextBlob(str(AI_practice_teaching[i]))
  AI_practice_teaching_all[AI_practice_teaching[i]] = res_AI_practice_teaching.sentiment.polarity

AI_practice_teaching_all

##################################  computing  correlation between the documents############################

AI_practice_teaching_Ratings=list(AI_dataset['How much you are able to understand the concepts of AI? Provide the ratings from 1-5 where 1-least and 5-highest'])

style_of_teaching_AI_ratings=list(AI_dataset['Rate the style of teaching the course of AI. 1-Least and 5-Highest'])

# len(style_of_teaching_AI_ratings)

# len(AI_practice_teaching)

AI_practice_teaching_Ratings

style_of_teaching_AI_ratings

#AI_practice_teaching whole column polarity
AI_improvments_all = {}
for i in range(0,len(AI_improvments)):
  res_AI_improvements = TextBlob(str(AI_improvments[i]))
  AI_improvments_all[AI_improvments[i]] = res_AI_improvements.sentiment.polarity

AI_improvments_all

# perform overall sentiment analysis of  all  commments in the documents
from textblob import TextBlob
import pandas as pd
import csv as csv
# Define a function to perform sentiment analysis on the feedback
# feedback_text = input("Enter Feedback :")
# Define a function that expects a string argument
def my_string(text):
# Do something with the text argument
    print(text)
#text = df.to_string(index=False)
text = feedback_text.to_string(index=False)
# Now you can pass the string to the function that expects it
my_string(text)
# Create a TextBlob object from the feedback text
feedback_blob = TextBlob(str(feedback_text))
# Determine the overall sentiment polarity of the feedback
polarity = feedback_blob.sentiment.polarity
# Print the sentiment polarity
print("Sentiment polarity of all comments in the document :", polarity)

# Commented out IPython magic to ensure Python compatibility.
# perfom wordcloud to determine common terms in entire ducument   
from os import path
from PIL import Image
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import warnings
warnings.filterwarnings("ignore")

# Create and generate a word cloud image:
wordcloud = WordCloud().generate(text)
# Display the generated image:
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

############################# create Excel sheet contains review and sentiment polarity for AI_practice_teaching_all only ######################################

import openpyxl
from textblob import TextBlob
# AI_practice_teaching_all
# Create an Excel workbook and worksheet
workbook = openpyxl.Workbook()
worksheet = workbook.active
# Add column headers
worksheet['A1'] ='Feedback'
worksheet['B1'] ='Sentiment_Polarity_AI_teaching_practice'
worksheet['C1'] ='understanding_AI_concepts_ratings'
worksheet['D1'] ='style_of_teaching_AI_ratings'

# Loop through each feedback and perform sentiment analysis
for i, feedback_text in enumerate(AI_practice_teaching_all):
    feedback_blob = TextBlob(str(feedback_text))
    polarity = feedback_blob.sentiment.polarity
     # convert the rating to a string
    understanding_AI_concepts_rating = str(AI_practice_teaching_Ratings[i]) if i < len(AI_practice_teaching_Ratings) else '' 
     # convert the rating to a string
    style_of_teaching_AI_rating = str(style_of_teaching_AI_ratings[i]) if i < len(style_of_teaching_AI_ratings) else ''
    # Add the feedback and sentiment polarity to the worksheet
    worksheet.cell(row=i+2, column=1, value=feedback_text)
    worksheet.cell(row=i+2, column=2, value=polarity)
    worksheet.cell(row=i+2, column=3, value= understanding_AI_concepts_rating)
    worksheet.cell(row=i+2, column=4, value= style_of_teaching_AI_rating)

# Save the workbook
workbook.save('AI_teaching_Practices_ratings_all.xlsx')

##################  AI_improvments in Ratings  ###################################

AI_teaching_new_data_set= pd.read_excel('AI_teaching_Practices_ratings_all.xlsx')

AI_new_dataset =AI_teaching_new_data_set

AI_new_dataset

############################# Perform Correlation  AI_teaching_Practices #####################

# correlation  between Sentiment_Polarity_AI_teaching_practice and understanding_AI_concepts_ratings
import numpy as np
corr = np.corrcoef(AI_new_dataset['Sentiment_Polarity_AI_teaching_practice'],AI_new_dataset['understanding_AI_concepts_ratings'])
print('Correlation  between Sentiment_Polarity_AI_teaching_practice and understanding_AI_concepts_ratings \n',corr)

# correlation  between Sentiment_Polarity_AI_teaching_practice and understanding_AI_concepts_ratings
import numpy as np

corr = np.corrcoef(AI_new_dataset['Sentiment_Polarity_AI_teaching_practice'],AI_new_dataset['style_of_teaching_AI_ratings'])
print('Correlation  between Sentiment_Polarity_AI_teaching_practice and understanding_AI_concepts_ratings \n',corr)

# correlation  between Sentiment_Polarity_AI_teaching_practice and understanding_AI_concepts_ratings
import numpy as np

corr = np.corrcoef(AI_new_dataset['understanding_AI_concepts_ratings'],AI_new_dataset['style_of_teaching_AI_ratings'])
print('Correlation  between understanding_AI_concepts_ratings and understanding_AI_concepts_ratings \n',corr)

###########################################  Perform Correlation  on AI_Improvements  ###############################

import openpyxl
from textblob import TextBlob
# AI_practice_teaching_all
# Create an Excel workbook and worksheet
workbook = openpyxl.Workbook()
worksheet = workbook.active
# Add column headers
worksheet['A1'] ='Feedback'
worksheet['B1'] ='Sentiment_Polarity_AI_Improvements'
worksheet['C1'] ='understanding_AI_concepts_ratings'
worksheet['D1'] ='style_of_teaching_AI_ratings'

# Loop through each feedback and perform sentiment analysis
for i, feedback_text in enumerate(AI_improvments_all):
    feedback_blob = TextBlob(str(feedback_text))
    polarity = feedback_blob.sentiment.polarity
     # convert the rating to a string
    understanding_AI_concepts_rating = str(AI_practice_teaching_Ratings[i]) if i < len(AI_practice_teaching_Ratings) else '' 
     # convert the rating to a string
    style_of_teaching_AI_rating = str(style_of_teaching_AI_ratings[i]) if i < len(style_of_teaching_AI_ratings) else ''
    # Add the feedback and sentiment polarity to the worksheet
    worksheet.cell(row=i+2, column=1, value=feedback_text)
    worksheet.cell(row=i+2, column=2, value=polarity)
    worksheet.cell(row=i+2, column=3, value= understanding_AI_concepts_rating)
    worksheet.cell(row=i+2, column=4, value= style_of_teaching_AI_rating)
# Save the workbook
workbook.save('AI_improvements_Ratings_all.xlsx')

new_dataset= pd.read_excel('AI_improvements_Ratings_all.xlsx')
combined_data_set=new_dataset

combined_data_set

# correlation  between AI understandings concept rate  and stye of teaching AI  Rate
import numpy as np

corr = np.corrcoef(combined_data_set['Sentiment_Polarity_AI_Improvements'],combined_data_set['understanding_AI_concepts_ratings'])
print('Correlation  between Sentiment_Polarity_AI_Improvements and understanding_AI_concepts_ratings \n',corr)
# correlation=np.corrcoef(AI_practice_teaching_Ratings)

###################### correlation  between  Sentiment_Polarity_AI_Improvements  and style_of_teaching_AI_ratings ###################################
import numpy as np
corr= np.corrcoef(combined_data_set['Sentiment_Polarity_AI_Improvements'],combined_data_set['style_of_teaching_AI_ratings'])
print('Correlation  between Sentiment_Polarity_AI_Improvements  and  style_of_teaching_AI_ratings \n',corr)
correlation=np.corrcoef(AI_practice_teaching_Ratings)

import numpy as np
corr= np.corrcoef(combined_data_set['understanding_AI_concepts_ratings'],combined_data_set['style_of_teaching_AI_ratings'])
print('Correlation  between understanding_AI_concepts_ratings and  style_of_teaching_AI_ratings  \n',corr)

#######################  do analysis on feedback for OT subject ########################

# OT_dataset=feedback_OT

OT_dataset= feedback_OT

OT_dataset

OT_practice_teaching = list(OT_dataset['What are the practices of teaching OT, you are feeling is good to learn and understand OT'])

OT_improvments = list(OT_dataset['What improvements is required in teaching to make the concepts of OT learn easily'])

#OT_practice_teaching whole column polarity
OT_practice_teaching_all={}

for i in range(0,len(OT_practice_teaching)):
 res = TextBlob(str(OT_practice_teaching[i])) 
 OT_practice_teaching_all[OT_practice_teaching[i]] = res.sentiment.polarity

OT_practice_teaching_all

#OT_improvement_teaching whole column polarity
import textblob
OT_improvments_all = {}
for i in range(0,len(OT_improvments)):
  res = TextBlob(str(OT_improvments[i]))
  OT_improvments_all[OT_improvments[i]] = res.sentiment.polarity

OT_improvments_all

# perform overall sentiment analysis of  all  commments in the documents
from textblob import TextBlob
import pandas as pd
import csv as csv
# Define a function to perform sentiment analysis on the feedback
# feedback_text = input("Enter Feedback :")
# Define a function that expects a string argument
def my_string(text):
# Do something with the text argument
    print(text)
#text = df.to_string(index=False)
text = feedback_OT.to_string(index=False)
# Now you can pass the string to the function that expects it
my_string(text)
# Create a TextBlob object from the feedback text
feedback_blob = TextBlob(str(feedback_OT))
# Determine the overall sentiment polarity of the feedback
polarity = feedback_blob.sentiment.polarity
# Print the sentiment polarity
print("Sentiment polarity of all comments in  Feedback_OT document :", polarity)

# Commented out IPython magic to ensure Python compatibility.
# perfom wordcloud to determine common terms in  feedback_OT ducument   
from os import path
from PIL import Image
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator
import warnings
warnings.filterwarnings("ignore")

# lower max_font_size, change the maximum number of word and lighten the background:
wordcloud = WordCloud(max_font_size=50, max_words=100, background_color="white").generate(text)
plt.figure()
plt.imshow(wordcloud, interpolation="bilinear")
plt.axis("off")
plt.show()

##################### perform correlation on OT Subject



OT_practice_teaching_Ratings=list(OT_dataset['How much you are able to understand the concepts of OT? Provide the ratings from 1-5 where 1-least and 5-highest'])

style_of_teaching_OT_ratings=list(OT_dataset['Rate the style of teaching the course of OT. 1-Least and 5-Highest'])

OT_practice_teaching_Ratings

style_of_teaching_OT_ratings

############################# create Excel sheet contains review and sentiment polarity for OT_practice_teaching_all only ######################################

import openpyxl
from textblob import TextBlob
# OT_practice_teaching_all
# Create an Excel workbook and worksheet
workbook = openpyxl.Workbook()
worksheet = workbook.active
# Add column headers
worksheet['A1'] ='Feedback'
worksheet['B1'] ='Sentiment_Polarity_OT_teaching_practice'
worksheet['C1'] ='understanding_OT_concepts_ratings'
worksheet['D1'] ='style_of_teaching_OT_ratings'

# Loop through each feedback and perform sentiment analysis
for i, feedback_text in enumerate(OT_practice_teaching_all):
    feedback_blob = TextBlob(str(feedback_text))
    polarity = feedback_blob.sentiment.polarity
     # convert the rating to a string
    understanding_OT_concepts_rating = str(OT_practice_teaching_Ratings[i]) if i < len(OT_practice_teaching_Ratings) else '' 
     # convert the rating to a string
    style_of_teaching_OT_rating = str(style_of_teaching_OT_ratings[i]) if i < len(style_of_teaching_OT_ratings) else ''
    # Add the feedback and sentiment polarity to the worksheet
    worksheet.cell(row=i+2, column=1, value=feedback_text)
    worksheet.cell(row=i+2, column=2, value=polarity)
    worksheet.cell(row=i+2, column=3, value= understanding_OT_concepts_rating)
    worksheet.cell(row=i+2, column=4, value= style_of_teaching_OT_rating)

# Save the workbook
workbook.save('OT_teaching_Practices_ratings_all.xlsx')

##################  OT_improvments in Ratings  ###################################

OT_teaching_new_data_set= pd.read_excel('OT_teaching_Practices_ratings_all.xlsx')

OT_new_dataset =OT_teaching_new_data_set

OT_new_dataset

############################# Perform Correlation  OT_teaching_Practices #####################

# correlation  between Sentiment_Polarity_AI_teaching_practice and understanding_AI_concepts_ratings
import numpy as np
corr = np.corrcoef(OT_new_dataset['Sentiment_Polarity_OT_teaching_practice'],OT_new_dataset['understanding_OT_concepts_ratings'])
print('Correlation  between Sentiment_Polarity_OT_teaching_practice and understanding_OT_concepts_ratings \n',corr)

# correlation  between Sentiment_Polarity_OT_teaching_practice and understanding_OT_concepts_ratings
import numpy as np

corr = np.corrcoef(OT_new_dataset['Sentiment_Polarity_OT_teaching_practice'],OT_new_dataset['style_of_teaching_OT_ratings'])
print('Correlation  between Sentiment_Polarity_OT_teaching_practice and understanding_OT_concepts_ratings \n',corr)

# correlation  between Sentiment_Polarity_AI_teaching_practice and understanding_AI_concepts_ratings
import numpy as np
corr = np.corrcoef(OT_new_dataset['understanding_OT_concepts_ratings'],OT_new_dataset['style_of_teaching_OT_ratings'])
print('Correlation  between understanding_OT_concepts_ratings and understanding_OT_concepts_ratings \n',corr)

###########################################  Perform Correlation  on OT_Improvements  ###############################

import openpyxl
from textblob import TextBlob
# AI_practice_teaching_all
# Create an Excel workbook and worksheet
workbook = openpyxl.Workbook()
worksheet = workbook.active
# Add column headers
worksheet['A1'] ='Feedback'
worksheet['B1'] ='Sentiment_Polarity_OT_Improvements'
worksheet['C1'] ='understanding_OT_concepts_ratings'
worksheet['D1'] ='style_of_teaching_OT_ratings'

# Loop through each feedback and perform sentiment analysis
for i, feedback_text in enumerate(OT_improvments_all):
    feedback_blob = TextBlob(str(feedback_text))
    polarity = feedback_blob.sentiment.polarity
     # convert the rating to a string
    understanding_OT_concepts_rating = str(OT_practice_teaching_Ratings[i]) if i < len(OT_practice_teaching_Ratings) else '' 
     # convert the rating to a string
    style_of_teaching_OT_rating = str(style_of_teaching_OT_ratings[i]) if i < len(style_of_teaching_OT_ratings) else ''
    # Add the feedback and sentiment polarity to the worksheet
    worksheet.cell(row=i+2, column=1, value=feedback_text)
    worksheet.cell(row=i+2, column=2, value=polarity)
    worksheet.cell(row=i+2, column=3, value= understanding_OT_concepts_rating)
    worksheet.cell(row=i+2, column=4, value= style_of_teaching_OT_rating)
# Save the workbook
workbook.save('OT_improvements_Ratings_all.xlsx')

new_dataset= pd.read_excel('OT_improvements_Ratings_all.xlsx')
combined_data_set=new_dataset

combined_data_set

# correlation  between OT understandings concept rate  and stye of teaching OT  Rate
import numpy as np

corr = np.corrcoef(combined_data_set['Sentiment_Polarity_OT_Improvements'],combined_data_set['understanding_OT_concepts_ratings'])
print('Correlation  between Sentiment_Polarity_OT_Improvements and understanding_OT_concepts_ratings \n',corr)

###################### correlation  between  Sentiment_Polarity_AI_Improvements  and style_of_teaching_AI_ratings ###################################
import numpy as np
corr= np.corrcoef(combined_data_set['Sentiment_Polarity_OT_Improvements'],combined_data_set['style_of_teaching_OT_ratings'])
print('Correlation  between Sentiment_Polarity_OT_Improvements  and  style_of_teaching_OT_ratings \n',corr)

import numpy as np
corr= np.corrcoef(combined_data_set['understanding_OT_concepts_ratings'],combined_data_set['style_of_teaching_OT_ratings'])
print('Correlation  between understanding_OT_concepts_ratings and  style_of_teaching_OT_ratings  \n',corr)